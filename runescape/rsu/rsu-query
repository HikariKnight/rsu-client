#!/usr/bin/perl -w

# Be strict to avoid messy code
use strict;

# Include the byte encryption so that the script will work on all localizations of windows or other systems
# Odd i know, but it is caused by the windows codepages (like chcp 1252 which is scandinavian)
use Encode::Byte;

# Include the module for extracting archives
use Archive::Extract;

# Include Config module for checking system values
use Config;

# Use FindBin module to get script directory
use FindBin;

# Get script directory
my $cwd = $FindBin::RealBin;
# Get script filename
my $scriptname = $FindBin::Script;
# Detect the current OS
my $OS = "$^O";

# URL for the maclibs download
my $maclib_url = "https://dl.dropbox.com/u/11631899/opensource/Perl/rsu-api/bin/darwin.tar.gz";
	
# run the script
main();

sub main
{
	# Get the architecture
	my $arch = $Config{archname};
	
	# If we are not on windows or mac
	if ($OS !~ /(MSWin32|darwin)/)
	{
		# If we are on 64bit
		if ($arch =~ /(x86_64|amd64)/ && $OS =~ /linux/)
		{
			# Use x86_64 as architecture
			$arch = "x86_64";
		}
		# Else if we are on 32bit
		elsif($arch =~ /i\d{1,1}86/ && $OS =~ /linux/)
		{
			# Use i386 as architecture
			$arch = "i386";
		}
		# Else we are on an architecture that does not support the launcher
		else
		{
			# Run in fallback mode
			fallbackmode();
			
			# Exit once we are done so we dont trigger the launcher
			exit;
		}
	}
	
	# If we are not on windows and --unixquery was passed
	if ($OS !~ /MSWin32/ && "@ARGV" =~ /--unixquery/)
	{
		# Run in fallback mode
		fallbackmode();
		
		# Exit once we are done so we dont trigger the launcher
		exit;
	}
	
	# If we are on Linux
	if($OS =~ /linux/)
	{
		if ("@ARGV" eq '')
		{
			# Open the bin directory
			opendir(my $bindir, "$cwd/bin");
			
			# Make a variable to see if binary launched
			my $binlaunched = 0;
			
			# While there is stuff we havent checked
			while (readdir $bindir)
			{
				# Next if not rsu-query-linux-$arch
				next if $_ !~ /^rsu-query-linux-$arch$/;
				
				# Launch the binary
				system "$cwd/bin/rsu-query-linux-$arch client.launch.launcher";
				
				# Set binlaunched to 1
				$binlaunched = 1;
			}
			
			# If binlaunched is 0
			if ($binlaunched =~ /^0$/)
			{
				# Add the client launcher api call to the parameters
				push(@ARGV, "client.launch.launcher");
				
				# Launch the fallback mode
				fallbackmode();
			}
			
			# Launch the universal script for the launcher
			system "";
		}
		else
		{
			# Open the bin directory
			opendir(my $bindir, "$cwd/bin");
			
			# Make a variable to see if binary launched
			my $binlaunched = 0;
			
			# While there is stuff we havent checked
			while (readdir $bindir)
			{
				# Next if not rsu-query-linux-$arch
				next if $_ !~ /^rsu-query-linux-$arch$/;
				
				# Launch the binary
				system "$cwd/bin/rsu-query-linux-$arch @ARGV";
				
				# Set binlaunched to 1
				$binlaunched = 1;
			}
			
			# If binlaunched is 0
			if ($binlaunched =~ /^0$/)
			{
				# Launch the fallback mode
				fallbackmode();
			}
		}
	}
	# Else if we are on darwin/osx
	elsif($OS =~ /darwin/)
	{
		# Run a check to see if the mac libraries are installed
		#checkformaclibs();
		
		# Launch the launcher for mac osx
		system "$cwd/bin/rsu-query-darwin @ARGV";
	}
	# Else
	else
	{
		# Run in fallback mode
		fallbackmode();
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub fetchmaclibs
{
	# Download the perl bundle containing the libraries and extract the archive inside the modules folder
	system "cd \"$cwd/modules\" && curl -o \"$cwd/modules/darwin.tar.gz\" $maclib_url && tar -zxvf \"$cwd/modules/darwin.tar.gz\" && rm \"$cwd/modules/darwin.tar.gz\"";
}

#
#---------------------------------------- *** ----------------------------------------
#

sub checkformaclibs
{
	# Make a variable to contain the directory list
	my $maclibs;
	
	if ($OS =~ /darwin/)
	{
		# Get a list of files in the client directory
		$maclibs = `ls "$cwd/modules"`;
	}
	
	# If we are running on darwin/MacOSX and the darwin folder does not exist
	if ($OS =~ /darwin/ && $maclibs !~ /darwin/)
	{
		# Display a message prompting the user to download an archive file containing the rsu-settings_mac loader(self contained minimal wxperl) and the wxWidgets libraries.
		print "The rsu-query requires extra libraries on MacOSX
(because apple broke their own in 10.5 and up)
So i have packaged a custom loader with a working version of wxWidgets
for use by this script to save you 1 - 2 hours of your life
compiling it yourself.

NOTE: If you want the sourcecode for the loader,
go to $cwd/modules/$OS/rsu-launcher/rsu-launcher-$OS
and add .zip behind the \"rsu-launcher-$OS\" and extract the archive.

Is it ok for me to download these libraries into the client directory?
Answer with yes or no (default = yes):";

		# Wait for users answer
		my $answer = <STDIN>;
		
		# If the user answers no
		if ($answer =~ /(no|n)/i)
		{
			# Exit the script
			exit;
		}
		else
		{
			fetchmaclibs();
		}
	}
}

#
#---------------------------------------- *** ----------------------------------------
#

sub fallbackmode
{
	# Print to STDERR that we are running on an unknown system
	print STDERR "WARNING: Running in fallback mode!\nrsu-queries will use the system perl so some API calls\nmay not work until you install certain modules\n" if "@ARGV" !~ /--unixquery/;
		
	# Install the menu icons and launch runescape
	system "$cwd/bin/rsu-query-unix @ARGV";
}

#
#---------------------------------------- *** ----------------------------------------
#

